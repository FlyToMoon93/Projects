{"ast":null,"code":"import React,{useEffect,useRef}from'react';import Plotly from'plotly.js-dist-min';import{Box}from'@mui/material';import{styled}from'@mui/material/styles';import{jsx as _jsx}from\"react/jsx-runtime\";const PlotContainer=styled(Box)(_ref=>{let{theme}=_ref;return{height:'560px',marginBottom:'40px',width:'100%',border:'2px solid #ddd',borderRadius:'8px',overflow:'hidden',backgroundColor:'#f9f9f9',boxShadow:'0 2px 10px rgba(0, 0, 0, 0.1)',[theme.breakpoints.down('sm')]:{height:'300px'}};});const DataContainer=styled('div')({textAlign:'center',color:'red',height:'100%',width:'100%',fontSize:'24px'});const PlotlyVisualization=_ref2=>{let{routes}=_ref2;const plotRef=useRef(null);const initPlot=()=>{if(!plotRef.current)return;const initialX=routes.map(route=>route.timestamp);const initialY=routes.map(route=>route.prefix);const initialColors=routes.map(route=>route.anomaly?'#FF4136':'#0074D9');const initialSizes=Array(routes.length).fill(12);const data=[{x:initialX,y:initialY,mode:'markers+text',marker:{size:initialSizes,color:initialColors},text:initialY,textposition:'top center',hoverinfo:'text'}];const layout={title:{text:'Live Route Updates',font:{size:24,color:'#333'}},xaxis:{title:'Time',type:'category',automargin:true},yaxis:{title:'',automargin:true},paper_bgcolor:'#ffffff',plot_bgcolor:'#ffffff',font:{color:'#333'}};const config={responsive:true,toImageButtonOptions:{format:'png',filename:'bgp-routes'}};Plotly.newPlot(plotRef.current,data,layout,config);};const handleResize=()=>{if(plotRef.current){Plotly.Plots.resize(plotRef.current);}};useEffect(()=>{initPlot();const resizeObserver=new ResizeObserver(handleResize);if(plotRef.current){resizeObserver.observe(plotRef.current);}return()=>{if(plotRef.current){resizeObserver.unobserve(plotRef.current);}};},[routes]);useEffect(()=>{if(routes.length>0&&plotRef.current){const latestRoute=routes[routes.length-1];const color=latestRoute.anomaly?'#FF4136':'#006400';Plotly.extendTraces(plotRef.current,{x:[[latestRoute.timestamp]],y:[[latestRoute.prefix]],'marker.color':[[color]]},[0]);}},[routes]);return/*#__PURE__*/_jsx(PlotContainer,{children:/*#__PURE__*/_jsx(DataContainer,{ref:plotRef})});};export default PlotlyVisualization;","map":{"version":3,"names":["React","useEffect","useRef","Plotly","Box","styled","jsx","_jsx","PlotContainer","_ref","theme","height","marginBottom","width","border","borderRadius","overflow","backgroundColor","boxShadow","breakpoints","down","DataContainer","textAlign","color","fontSize","PlotlyVisualization","_ref2","routes","plotRef","initPlot","current","initialX","map","route","timestamp","initialY","prefix","initialColors","anomaly","initialSizes","Array","length","fill","data","x","y","mode","marker","size","text","textposition","hoverinfo","layout","title","font","xaxis","type","automargin","yaxis","paper_bgcolor","plot_bgcolor","config","responsive","toImageButtonOptions","format","filename","newPlot","handleResize","Plots","resize","resizeObserver","ResizeObserver","observe","unobserve","latestRoute","extendTraces","children","ref"],"sources":["D:/Java/Projects/bgp-visualization/bgp-frontend/src/components/PlotlyVisualization.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Plotly from 'plotly.js-dist-min';\r\nimport { Route } from '../types/route';\r\nimport { Box } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\ninterface PlotlyVisualizationProps {\r\n    routes: Route[];\r\n}\r\n\r\nconst PlotContainer = styled(Box)(({ theme }) => ({\r\n    height: '560px',\r\n    marginBottom: '40px',\r\n    width: '100%',\r\n    border: '2px solid #ddd',\r\n    borderRadius: '8px',\r\n    overflow: 'hidden',\r\n    backgroundColor: '#f9f9f9',\r\n    boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\r\n    [theme.breakpoints.down('sm')]: {\r\n        height: '300px',\r\n    },\r\n}));\r\n\r\nconst DataContainer = styled('div')({\r\n    textAlign: 'center',\r\n    color: 'red',\r\n    height: '100%',\r\n    width: '100%',\r\n    fontSize: '24px',\r\n});\r\n\r\nconst PlotlyVisualization: React.FC<PlotlyVisualizationProps> = ({ routes }) => {\r\n    const plotRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const initPlot = () => {\r\n        if (!plotRef.current) return;\r\n\r\n        const initialX: string[] = routes.map(route => route.timestamp);\r\n        const initialY: string[] = routes.map(route => route.prefix);\r\n        const initialColors: string[] = routes.map(route => (route.anomaly ? '#FF4136' : '#0074D9'));\r\n        const initialSizes: number[] = Array(routes.length).fill(12);\r\n\r\n        const data = [{\r\n            x: initialX,\r\n            y: initialY,\r\n            mode: 'markers+text' as const,\r\n            marker: { size: initialSizes, color: initialColors },\r\n            text: initialY,\r\n            textposition: 'top center' as const,\r\n            hoverinfo: 'text' as const,\r\n        }];\r\n\r\n        const layout: Partial<Plotly.Layout> = {\r\n            title: {\r\n                text: 'Live Route Updates',\r\n                font: { size: 24, color: '#333' },\r\n            },\r\n            xaxis: { title: 'Time', type: 'category', automargin: true },\r\n            yaxis: { title: '', automargin: true },\r\n            paper_bgcolor: '#ffffff',\r\n            plot_bgcolor: '#ffffff',\r\n            font: { color: '#333' },\r\n        };\r\n\r\n        const config: Partial<Plotly.Config> = {\r\n            responsive: true,\r\n            toImageButtonOptions: {\r\n                format: 'png',\r\n                filename: 'bgp-routes',\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot(plotRef.current, data, layout, config)\r\n    };\r\n\r\n    const handleResize = () => {\r\n        if (plotRef.current) {\r\n            Plotly.Plots.resize(plotRef.current);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        initPlot();\r\n\r\n        const resizeObserver = new ResizeObserver(handleResize);\r\n        if (plotRef.current) {\r\n            resizeObserver.observe(plotRef.current);\r\n        }\r\n\r\n        return () => {\r\n            if (plotRef.current) {\r\n                resizeObserver.unobserve(plotRef.current);\r\n            }\r\n        };\r\n    }, [routes]);\r\n\r\n    useEffect(() => {\r\n        if (routes.length > 0 && plotRef.current) {\r\n            const latestRoute = routes[routes.length - 1];\r\n            const color = latestRoute.anomaly ? '#FF4136' : '#006400';\r\n\r\n            Plotly.extendTraces(plotRef.current, {\r\n                x: [[latestRoute.timestamp]],\r\n                y: [[latestRoute.prefix]],\r\n                'marker.color': [[color]],\r\n            }, [0])\r\n        }\r\n    }, [routes]);\r\n\r\n    return (\r\n        <PlotContainer>\r\n            <DataContainer ref={plotRef} />\r\n        </PlotContainer>\r\n    );\r\n};\r\n\r\nexport default PlotlyVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}