{"ast":null,"code":"import{useEffect,useState}from'react';import io from'socket.io-client';const useSocket=()=>{const[routes,setRoutes]=useState([]);useEffect(()=>{const socket=io('http://localhost:3000/',{transports:['websocket']});socket.on('connect',()=>{console.log('Verbunden mit Flask-SocketIO!');});// 'all_routes' Event empfangen, um die gesamte Routenliste auf einmal zu bekommen\nsocket.on('all_routes',data=>{if(Array.isArray(data.ipmap)){setRoutes(data.ipmap);// Setzt die gesamte Routenliste auf einmal\nconsole.log('Alle Routen empfangen:',data.ipmap);}else{console.error('Unerwartetes Format:',data);}});return()=>{socket.disconnect();};},[]);return{routes};};export default useSocket;","map":{"version":3,"names":["useEffect","useState","io","useSocket","routes","setRoutes","socket","transports","on","console","log","data","Array","isArray","ipmap","error","disconnect"],"sources":["D:/Java/Projects/bgp-visualization/bgp-frontend/src/hooks/useSocket.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Route1} from '../types/route';\r\n\r\nconst useSocket = () => {\r\n    const [routes, setRoutes] = useState<Route1[]>([]);\r\n\r\n    useEffect(() => {\r\n        const socket = io('http://localhost:3000/', {\r\n            transports: ['websocket'],\r\n        });\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Verbunden mit Flask-SocketIO!');\r\n        });\r\n\r\n        // 'all_routes' Event empfangen, um die gesamte Routenliste auf einmal zu bekommen\r\n        socket.on('all_routes', (data) => {\r\n            if (Array.isArray(data.ipmap)) {\r\n                setRoutes(data.ipmap); // Setzt die gesamte Routenliste auf einmal\r\n                console.log('Alle Routen empfangen:', data.ipmap);\r\n            } else {\r\n                console.error('Unerwartetes Format:', data);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    return { routes };\r\n};\r\n\r\nexport default useSocket;\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CAGjC,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACpB,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGJ,QAAQ,CAAW,EAAE,CAAC,CAElDD,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAM,MAAM,CAAGJ,EAAE,CAAC,wBAAwB,CAAE,CACxCK,UAAU,CAAE,CAAC,WAAW,CAC5B,CAAC,CAAC,CAEFD,MAAM,CAACE,EAAE,CAAC,SAAS,CAAE,IAAM,CACvBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAChD,CAAC,CAAC,CAEF;AACAJ,MAAM,CAACE,EAAE,CAAC,YAAY,CAAGG,IAAI,EAAK,CAC9B,GAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACG,KAAK,CAAC,CAAE,CAC3BT,SAAS,CAACM,IAAI,CAACG,KAAK,CAAC,CAAE;AACvBL,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEC,IAAI,CAACG,KAAK,CAAC,CACrD,CAAC,IAAM,CACHL,OAAO,CAACM,KAAK,CAAC,sBAAsB,CAAEJ,IAAI,CAAC,CAC/C,CACJ,CAAC,CAAC,CAEF,MAAO,IAAM,CACTL,MAAM,CAACU,UAAU,CAAC,CAAC,CACvB,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEZ,MAAO,CAAC,CACrB,CAAC,CAED,cAAe,CAAAD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}